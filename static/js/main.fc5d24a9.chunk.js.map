{"version":3,"sources":["data.js","Detail.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","styled","div","h4","props","colorChange","Info","재고","Detail","history","useHistory","useParams","findItem","shoes","find","item","useState","alert","alertSet","inputData","inputDataSet","useEffect","axios","get","time","setTimeout","clearTimeout","className","onChange","e","target","value","src","width","onClick","재고변경","goBack","Card","i","Jumbo","Jumbotron","App","Data","shoes변경","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Item","Divider","exact","path","map","a","post","pw","then","result","console","log","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc5d24a9.chunk.js","sourcesContent":["// 1.\r\n// var name = 'kim';\r\n// var name 2= 'park';\r\n// export default name;\r\n// - 다른 파일에서 가져다 쓸 수 있다. \r\n//  - 한번밖에 못쓴다.\r\n//  - export {name, name2}\r\n//  - 근데 여러개를 export 할 일이 잘 없음 \r\n\r\n\r\n\r\nexport default [\r\n    {\r\n        id: 0,\r\n        title: \"검정색 운동화\",\r\n        content: \"Born in France\",\r\n        price: 120000\r\n    },\r\n\r\n    {\r\n        id: 1,\r\n        title: \"빨간색 운동화\",\r\n        content: \"Born in Seoul\",\r\n        price: 110000\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        title: \"회색 운동화\",\r\n        content: \"Born in the States\",\r\n        price: 130000\r\n    }\r\n]","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport styled from 'styled-components';\r\n// import './Dtail.scss';\r\n// 기본 셋팅을 해야 컴포넌트가 된다\r\n\r\nlet box = styled.div`\r\n    padding : 20px;\r\n`;\r\n\r\nlet title = styled.h4`\r\n    font-size: 25px;\r\n    color : ${props => props.colorChange};\r\n`;\r\n\r\n// class Datail2 extends React.Componont {\r\n\r\n//     componentDidMount(){\r\n//         // Ajax 여따 작성함 \r\n//     }\r\n\r\n//     componentWillUnmount(){\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// ↑ 이것보다 더 새로운 Hook이 있음 !\r\n//      - useEffect : \r\n//      컴포넌트가 MOUNT되었을때 컴포넌트가 update될때 특정코드를 실행할 수 있음\r\n\r\n\r\n\r\nfunction Detail(props) {\r\n\r\n    // 1. useHistory : 이동했던 모든 페이지들을 가득 담는 Object\r\n    //  - goBack() : 돌아간다 (뒤로가기)\r\n    //  - push('/') : / 라는 경로로 이동해주세요 ~\r\n    // 2. useParams : { 사용자가 입력한 URL 파라미터들 }\r\n    let history = useHistory();\r\n    let { id } = useParams();\r\n    let findItem = props.shoes.find(function (item) {\r\n        return item.id == id;\r\n    });\r\n\r\n    // userEffect : Detail 이 렌더링 될때 실행된다.\r\n    let [alert, alertSet] = useState(true);\r\n    let [inputData, inputDataSet] = useState('');\r\n\r\n    // setTimeout 쓸때주의점 \r\n    //  - return () => {clearTimeout};로 타이머 제거해줘야함\r\n    useEffect(() => {\r\n        // Q.Detail 컴포넌트 로드시 ajax로 데이터를 가져오고싶음 \r\n        axios.get()\r\n\r\n        //  2초후에 alert창 제거\r\n        let time = setTimeout(() => {\r\n            alertSet(false);\r\n            return () => { clearTimeout(time) };\r\n        }, 2000);\r\n    }, [alert]);\r\n    // alert라는 state가 변경이 될때만 실행 ㄱㄱ\r\n    //  - [] 가 빈칸이라면? 그냥 <Detail></Detail>업데이트시에만 실행됨\r\n    //      - <Detail></Detail>등장시 한번 실행하고 끝남 \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <box>\r\n                <title colorChange={'pink'}>Detail Page</title>\r\n            </box>\r\n\r\n\r\n            { inputData}\r\n            <input onChange={(e) => { inputDataSet(e.target.value) }} />\r\n\r\n            {\r\n                alert == true ?\r\n                    <div className=\"my-alert2\">\r\n                        <p>재고가 얼마남지 않았습니다.</p>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n                </div>\r\n                <div className=\"col-md-6 mt-4\">\r\n                    <h4 className=\"pt-5\">{findItem.title}</h4>\r\n                    <p>{findItem.content}</p>\r\n                    <p>{findItem.price}원</p>\r\n\r\n                    <Info 재고={props.재고}></Info>\r\n\r\n                    <button className=\"btn btn-danger\" \r\n                    onClick={ () => {\r\n                         props.재고변경([9,11,12]) \r\n                    } }>주문하기</button>\r\n\r\n                    <button className=\"btn btn-danger\" \r\n                    onClick={() => {\r\n                        history.goBack();\r\n                    } }>뒤로가기</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Info(props) {\r\n    return (\r\n        <p>재고 : {props.재고[0]} </p>\r\n    )\r\n}\r\n\r\n\r\nexport default Detail;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport Data from './data.js';\nimport Detail from './Detail.js';\nimport axios from 'axios';\n\n// 1. import  { name, name2 }  from './data.js';\n// - ./ : 현재 경로 \n\n// link: 누르면 다른 주소로 이동시키기\n//        - 경로지정 (<a></a> 태그와 매우 유사하다)\n// route: 특정 주소에 컴포넌트 연결하기\n//        - 사용자가 요청하는 주소에 따라 다른 컴포넌트를 보여줘보겠습니다. \n// switch: 여러개가 맞아도 하나만 보여주세요 ~\n\n// 2. 컴포넌트의 Lifecycle\n//    - 컴포넌트는 사라지고 생성되고 업데이트되는 인생이있다.\n//    - Lifecycle 중간에 hook을 걸 수 가 있다. (그 전에 이것좀 해줘!)\n//    - 컴포넌트의 인생 중간중간에 뭔가 명령을 줄 수 있음\n\nimport { Link, Route } from 'react-router-dom';\n\nfunction App(props) {\n  let [shoes, shoes변경] = useState(Data);\n  let [재고, 재고변경] = useState([10, 11, 12]);\n\n  return (\n\n    <div className=\"App\">\n      {/* {name} */}\n\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Shose shop</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n\n          <Nav className=\"mr-auto\">\n\n            <Nav.Link as={Link}>\n              Home\n            </Nav.Link>\n\n            <Nav.Link as={Link} to=\"/detail\">\n              Detail\n            </Nav.Link>\n\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n\n        </Navbar.Collapse>\n      </Navbar>\n\n\n      {/* Routing 하는 법 */}\n      {/* exact : 조건과 딱 맞아 떨어질때 내용 출력 */}\n      <Route exact path=\"/\">\n        <Jumbo />\n        <div className=\"container\">\n          <div className=\"row\">\n            {/* 반복문 돌리기 \n            - 반복문을 돌린 뒤에는 key를 써줘야한다.\n          */}\n            {\n              shoes.map((a, i) => {  // a: 하나하나의 데이터, i: 0 1 2 ...\n                return <Card shoes={shoes[i]} i={i} key={i} />\n              })\n            }\n          </div>\n\n          <button className=\"btn btn-primary\" onClick={() => {\n            // Q. 서버에 데이터를 보내고 싶을때 POST 요청하는 법\n            axios.post('서버URL', { id: 'codingapple', pw: 1234 })\n              .then();\n\n            // 로딩중이라는 UI 띄우기\n\n\n            // get요청 했음\n            axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((result) => {\n                // 실행됐으면 로딩중 UI 없애기\n\n                console.log(result.data);\n                // ... : 괄호 벗겨줌\n                // - shoes 카피본 생성\n                // - state 빨리빨리 변경하는 일종의 태크닉 \n                shoes변경([...shoes, ...result.data]);\n                //shoes변경( [{},{},{}, {},{},{}] );\n\n                // 1. 버튼 누르면 ajax 요청으로 데이터 가져옴\n                // 2. 그걸 shoes라는 state에 추가\n\n              })\n              .catch(() => {\n                console.log('실패했어요')\n              })\n\n          }}>더보기</button>\n\n        </div>\n      </Route>\n\n\n      {/* \n      Ajax : 서버에 새로고침없이 요청할 수 있게 도와줌 \n        - 1. jQuery 설치해서 $.ajax()\n        - 2. axios 설치해서 axios.get()\n        - 3. 쌩자바스크립트 fetch\n\n        - ★★★ then() : ajax요청이 \"성공\"했을 때  \n        - ★★★ catch() : ajax요청이 \"실패\"했을 때  \n\n        - 우리가 요청한 자료는 따옴표가 있는 JSON\n        - axios를 쓰시면 JSON을 Object로 알아서 바꿔줍니다.\n      */}\n\n\n\n\n\n\n      {/* \n        :의 역할 : 아무 문자나 받겠다는 URL 작명법 \n        만약에 0번~10번까지의 상품이 있다치면 일일히 적기 번거로우니 \n        파라미터 방식(:id)으로 처리해준다.\n      */}\n      <Route path=\"/detail/:id\">\n        <Detail shoes={shoes} 재고={재고} 재고변경={재고변경} />\n      </Route>\n\n      {/*\n       id : /모든문자 라는 경로를 의미 \n          - detail 페이지에 들어가도 \n          <div>아무거나 적었을때 이거 보여주셈</div>\n          라는 말이 보임 \n      */}\n      <Route path=\"/:id\">\n        <div>아무거나 적었을때 이거 보여주셈</div>\n      </Route>\n      {/* <Route path=\"/어쩌구\" component={Modal} ></Route> */}\n\n\n    </div >\n  );\n}\n\n\n\n// 2. 컴포넌트화 시키기\n//  - props로 신고해줘야함 \n\n\nfunction Card(props) {\n  return (\n    <div className=\"col-md-4\">\n      <img src={\"https://codingapple1.github.io/shop/shoes\" + (props.i + 1) + \".jpg\"}\n        width=\"100%\" />\n      <h4>{props.shoes.title}</h4>\n      <h4>{props.shoes.content} & {props.shoes.price}</h4>\n    </div>\n  )\n}\n\nfunction Jumbo() {\n  return (\n    <Jumbotron className=\"background\">\n      <h1>20% season OFF</h1>\n      <p>\n        This is a simple hero unit, a simple jumbotron-style component for calling\n        extra attention to featured content or information.\n    </p>\n      {/* <p>\n        <Button variant=\"primary\">Learn more</Button>\n      </p> */}\n    </Jumbotron>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorker from './serviceWorker';\n\n// from 뒤 : 라이브러리 \n// BrowserRouter VS HashRouter 아무거나 써도됨 \nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* 라우터 셋팅 */}\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}